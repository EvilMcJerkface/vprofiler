 ///////////////////////////////////////////////////// 
 // Note that this file was generated by VProfiler. // 
 // Please do not change the contents of this file! // 
 ///////////////////////////////////////////////////// 

#include "VProfEventWrappers.h"

apr_status_t apr_thread_cond_broadcast_vprofiler(apr_thread_cond_t * cond) {
	apr_status_t result;
	SYNCHRONIZATION_CALL_START(CV_BROADCAST, static_cast<void*>(cond));
	result = apr_thread_cond_broadcast(cond);
	SYNCHRONIZATION_CALL_END();
	return result;
}

apr_status_t apr_thread_cond_wait_vprofiler(apr_thread_cond_t * cond, apr_thread_mutex_t * mutex) {
	apr_status_t result;
	SYNCHRONIZATION_CALL_START(CV_WAIT, static_cast<void*>(cond));
	result = apr_thread_cond_wait(cond, mutex);
	SYNCHRONIZATION_CALL_END();
	return result;
}

apr_status_t apr_thread_mutex_unlock_vprofiler(apr_thread_mutex_t * mutex) {
	apr_status_t result;
	SYNCHRONIZATION_CALL_START(MUTEX_UNLOCK, static_cast<void*>(mutex));
	result = apr_thread_mutex_unlock(mutex);
	SYNCHRONIZATION_CALL_END();
	return result;
}

apr_status_t apr_thread_cond_signal_vprofiler(apr_thread_cond_t * cond) {
	apr_status_t result;
	SYNCHRONIZATION_CALL_START(CV_SIGNAL, static_cast<void*>(cond));
	result = apr_thread_cond_signal(cond);
	SYNCHRONIZATION_CALL_END();
	return result;
}

apr_status_t apr_thread_mutex_lock_vprofiler(apr_thread_mutex_t * mutex) {
	apr_status_t result;
	SYNCHRONIZATION_CALL_START(MUTEX_LOCK, static_cast<void*>(mutex));
	result = apr_thread_mutex_lock(mutex);
	SYNCHRONIZATION_CALL_END();
	return result;
}

