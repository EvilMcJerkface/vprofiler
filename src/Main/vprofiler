#!/usr/bin/env python

# Add vprof/share to sys.path
import os
import sys

cwd = os.path.dirname(os.path.realpath(__file__))
installPrefix = cwd[:cwd.rfind('bin')]

os.environ['PATH'] += ":" + installPrefix + 'share/vprofiler'
sys.path.append(installPrefix + 'share/vprofiler')
sys.path.append(installPrefix + 'share/vprofiler/Main')

from AnnotatorDispatcher import Annotator
from BreakdownDispatcher import Breakdown
from RestoreDispatcher import Restore
from FullDispatcher import Full

import argparse

##################################
# Set command line options begin #
##################################

parser = argparse.ArgumentParser(prog="vprof",
                         description="VProfiler - a system for identifying sources of variance within a codebase",
                         epilog="For more help, visit https://github.com/mozafari/vprofiler")

parser.add_argument('-b', '--build_script',
                    help='Path to the script which will build your source tree')

parser.add_argument('-e', '--run_script',
                    help='Path to the script which will automatically run your system')

parser.add_argument('--annotate',
                    action='store_true',
                    help='Setting this flag tells vprofiler to annotate your code')

parser.add_argument('--breakdown',
                    action='store_true',
                    help='Setting this flag tells vprofiler to determine which parts of your code most attribute to variance')

parser.add_argument('--restore', action='store_true',
                    help='Setting this flag tells vprofiler to restore your source tree to its un-annotated state. ' \
                          'That is, the state of the source tree before vprofiler performed annotations')

parser.add_argument('-s', '--source_dir',
                    help='This directory is the root of your source tree.  This must be set when using the option -a')

parser.add_argument('-p', '--parallelism_functions',
                    help='A file listing the parallelism functions which should be profiled.  For specifics ' \
                            'on the format of this file see https://github.com/mozafari/vprofiler')

parser.add_argument('-c', '--compilation_db',
                    help='The compilation database vprofiler will use when instrumenting source code.')

parser.add_argument('-t', '--target_func',
                    help='The name of the top level function in which the semantic interval begins')

# For finding path to trace_tool.cc, maybe make some dir like /lib/vprof/ and put trace_tool
# there instead of having a separate command line option?

# parser.add_argument('-d', '--data_dir',
#                     help='Directory containing the data files created by vprofiler')

parser.add_argument('-i', '--heights_file',
                    help='File containing each function in the call graph and its ' \
                         'corresponding height in the graph')

parser.add_argument('-k', '--num_factors', help='The number of factors to be selected')

parser.add_argument('-r', '--root_funcs', help='List of root functions of all threads')

##################################
# Set command line options end   #
##################################

dispatchers = { 'Annotator': Annotator(),
                'Breakdown': Breakdown(),
                'Restore':   Restore(),
                'Full':      Full() }

args = parser.parse_args()

mode = ''
if args.annotate:
    mode = 'Annotator'
elif args.breakdown:
    mode = 'Breakdown'
elif args.restore:
    mode = 'Restore'
else:
    mode = 'Full'


if not dispatchers[mode].ParseOptions(args):
    print('Error parsing command line options')
    exit(1)

dispatchers[mode].Dispatch()
